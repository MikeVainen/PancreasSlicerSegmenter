// This file was automatically generated by:
//  C:\SlicerPFC\SlicerExecutionModel-build\GenerateCLP\bin\Release\GenerateCLP.exe --InputXML C:/PFC/SlicerModules/MyExtension/LusSegmenter/LusSegmenter.xml --OutputCxx C:/PFC/SlicerModules/MyExtension/Vs2008Build/LusSegmenter/LusSegmenterCLP.h
//
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <map>

#include <sstream>

#include "tclap/CmdLine.h"
#include "ModuleProcessInformation.h"

#ifdef _WIN32
#define Module_EXPORT __declspec(dllexport)
#else
#define Module_EXPORT
#endif

#if defined(main) && !defined(REGISTER_TEST)
// If main defined as a preprocessor symbol, redefine it to the expected entry point.
#undef main
#define main ModuleEntryPoint

extern "C" {
  Module_EXPORT char *GetXMLModuleDescription();
  Module_EXPORT int ModuleEntryPoint(int, char*[]);
}
#endif

extern "C" {
Module_EXPORT char XMLModuleDescription[] = 
"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
"<executable>\n"
"  <category>Examples</category>\n"
"  <title>LusSegmenter</title>\n"
"  <description><![CDATA[This is a CLI module that can be bundled in an extension]]></description>\n"
"  <version>0.0.1</version>\n"
"  <documentation-url>http://www.example.com/Slicer/Modules/LusSegmenter</documentation-url>\n"
"  <license>Slicer</license>\n"
"  <contributor>FirstName LastName (Institution), FirstName LastName (Institution)</contributor>\n"
"  <acknowledgements>This work was partially funded by NIH grant NXNNXXNNNNNN-NNXN</acknowledgements>\n"
"  <parameters>\n"
"    <label>IO</label>\n"
"    <description><![CDATA[Input/output parameters]]></description>\n"
"    <integer>\n"
"      <name>radius</name>\n"
"      <longflag>radius</longflag>\n"
"      <flag>r</flag>\n"
"      <label>Radius</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>9</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>maxrad</name>\n"
"      <longflag>maxrad</longflag>\n"
"      <flag>b</flag>\n"
"      <label>Max radius</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>6</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>minrad</name>\n"
"      <longflag>minrad</longflag>\n"
"      <flag>a</flag>\n"
"      <label>Min radius</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>4</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>lowerthreshold</name>\n"
"      <longflag>lowerthreshold</longflag>\n"
"      <flag>l</flag>\n"
"      <label>Lower threshold</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>90</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>upperthreshold</name>\n"
"      <longflag>upperthreshold</longflag>\n"
"      <flag>u</flag>\n"
"      <label>Upper threshold</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>220</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>bX</name>\n"
"      <longflag>bX</longflag>\n"
"      <flag>x</flag>\n"
"      <label>X begin</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>15</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>bY</name>\n"
"      <longflag>bY</longflag>\n"
"      <flag>y</flag>\n"
"      <label>Y begin</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>18</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>eX</name>\n"
"      <longflag>eX</longflag>\n"
"      <flag>z</flag>\n"
"      <label>X end</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>360</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>eY</name>\n"
"      <longflag>eY</longflag>\n"
"      <flag>w</flag>\n"
"      <label>Y end</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>135</default>\n"
"    </integer>\n"
"    <integer>\n"
"      <name>ncircles</name>\n"
"      <longflag>ncircles</longflag>\n"
"      <flag>n</flag>\n"
"      <label>Number of Circles</label>\n"
"      <description><![CDATA[A double value (in units of mm) passed to the algorithm]]></description>\n"
"      <default>20</default>\n"
"    </integer>\n"
"    <image>\n"
"      <name>inputImage</name>\n"
"      <label>Input Image</label>\n"
"      <channel>input</channel>\n"
"      <index>0</index>\n"
"      <description><![CDATA[Input image]]></description>\n"
"    </image>\n"
"    <image>\n"
"      <name>outputImage</name>\n"
"      <label>Output Image</label>\n"
"      <channel>output</channel>\n"
"      <index>1</index>\n"
"      <description><![CDATA[Output Image]]></description>\n"
"    </image>\n"
"  </parameters>\n"
"</executable>\n"
"\n"
;

}

void
splitString (const std::string &text,
             const std::string &separators,
             std::vector<std::string> &words)
{
  const std::string::size_type n = text.length();
  std::string::size_type start = text.find_first_not_of(separators);
  while (start < n)
    {
    std::string::size_type stop = text.find_first_of(separators, start);
    if (stop > n) stop = n;
    words.push_back(text.substr(start, stop - start));
    start = text.find_first_not_of(separators, stop+1);
    }
}

void
splitFilenames (const std::string &text,
                std::vector<std::string> &words)
{
  const std::string::size_type n = text.length();
  bool quoted;
  std::string comma(",");
  std::string quote("\"");
  std::string::size_type start = text.find_first_not_of(comma);
  while (start < n)
    {
    quoted = false;
    std::string::size_type startq = text.find_first_of(quote, start);
    std::string::size_type stopq = text.find_first_of(quote, startq+1);
    std::string::size_type stop = text.find_first_of(comma, start);
    if (stop > n) stop = n;
    if (startq != std::string::npos && stopq != std::string::npos)
      {
      while (startq < stop && stop < stopq && stop != n)
         {
         quoted = true;
         stop = text.find_first_of(comma, stop+1);
         if (stop > n) stop = n;
         }
      }
    if (!quoted)
      {
      words.push_back(text.substr(start, stop - start));
      }
    else
      {
      words.push_back(text.substr(start+1, stop - start-2));
      }
    start = text.find_first_not_of(comma, stop+1);
    }
}

char *GetXMLModuleDescription()
{
   return XMLModuleDescription;
}

#define GENERATE_LOGO
#define GENERATE_XML \
  if (argc >= 2 && (strcmp(argv[1],"--xml") == 0)) \
    { \
    std::cout << GetXMLModuleDescription(); \
    return EXIT_SUCCESS; \
    }
#define GENERATE_TCLAP_PARSE \
    int radius = 9; \
	int maxrad = 6; \
	int minrad = 4; \
	int upperthreshold = 90; \
	int lowerthreshold = 220; \
	int bX = 15; \
	int bY = 18; \
	int eX= 330; \
	int eY= 135; \
	int ncircles = 20; \
    std::string inputImage; \
    std::string outputImage; \
    bool echoSwitch = false; \
    bool xmlSwitch = false; \
    std::string processInformationAddressString = "0"; \
    std::string returnParameterFile; \
    std::string fullDescription("Description: "); \
    fullDescription += "This is a CLI module that can be bundled in an extension"; \
    if (!std::string("FirstName LastName (Institution), FirstName LastName (Institution)").empty()) \
      { \
      fullDescription += "\nAuthor(s): FirstName LastName (Institution), FirstName LastName (Institution)"; \
      } \
    if (!std::string("This work was partially funded by NIH grant NXNNXXNNNNNN-NNXN").empty()) \
      { \
      fullDescription += "\nAcknowledgements: This work was partially funded by NIH grant NXNNXXNNNNNN-NNXN"; \
      } \
    TCLAP::CmdLine commandLine (fullDescription, \
       ' ', \
      "0.0.1" ); \
 \
      std::ostringstream msg; \
    msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << radius << ")"; \
    TCLAP::ValueArg<int > radiusArg("r", "radius", msg.str(), 0, radius, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << maxrad << ")"; \
    TCLAP::ValueArg<int > maxradArg("b", "maxrad", msg.str(), 0, maxrad, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << minrad << ")"; \
    TCLAP::ValueArg<int > minradArg("a", "minrad", msg.str(), 0, minrad, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << lowerthreshold << ")"; \
    TCLAP::ValueArg<int > lowerthresholdArg("l", "lowerthreshold", msg.str(), 0, lowerthreshold, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << upperthreshold << ")"; \
    TCLAP::ValueArg<int > upperthresholdArg("u", "upperthreshold", msg.str(), 0, upperthreshold, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << bX << ")"; \
    TCLAP::ValueArg<int > xArg("x", "bX", msg.str(), 0, bX, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << bY << ")"; \
    TCLAP::ValueArg<int > yArg("y", "bY", msg.str(), 0, bY, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << eY << ")"; \
    TCLAP::ValueArg<int > eyArg("w", "eY", msg.str(), 0, eY, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << eX << ")"; \
    TCLAP::ValueArg<int > exArg("z", "eX", msg.str(), 0, eX, "integer", commandLine); \
 \
     msg.str("");msg << "A double value (in units of mm) passed to the algorithm (default: " << ncircles << ")"; \
    TCLAP::ValueArg<int > circlesArg("n", "ncircles", msg.str(), 0, ncircles, "integer", commandLine); \
 \
    msg.str("");msg << "Input image";    TCLAP::UnlabeledValueArg<std::string> inputImageArg("inputImage", msg.str(), 1, inputImage, "std::string", commandLine); \
 \
    msg.str("");msg << "Output image";    TCLAP::UnlabeledValueArg<std::string> outputImageArg("outputImage", msg.str(), 1, outputImage, "std::string", commandLine); \
 \
    msg.str("");msg << "Echo the command line arguments (default: " << echoSwitch << ")"; \
    TCLAP::SwitchArg echoSwitchArg("", "echo", msg.str(), commandLine, echoSwitch); \
 \
    msg.str("");msg << "Produce xml description of command line arguments (default: " << xmlSwitch << ")"; \
    TCLAP::SwitchArg xmlSwitchArg("", "xml", msg.str(), commandLine, xmlSwitch); \
 \
    msg.str("");msg << "Address of a structure to store process information (progress, abort, etc.). (default: " << processInformationAddressString << ")"; \
    TCLAP::ValueArg<std::string > processInformationAddressStringArg("", "processinformationaddress", msg.str(), 0, processInformationAddressString, "std::string", commandLine); \
 \
    msg.str("");msg << "Filename in which to write simple return parameters (int, float, int-vector, etc.) as opposed to bulk return parameters (image, geometry, transform, measurement, table).";    TCLAP::ValueArg<std::string > returnParameterFileArg("", "returnparameterfile", msg.str(), 0, returnParameterFile, "std::string", commandLine); \
 \
try \
  { \
    /* Build a map of flag aliases to the true flag */ \
    std::map<std::string,std::string> flagAliasMap; \
    std::map<std::string,std::string> deprecatedFlagAliasMap; \
    std::map<std::string,std::string> longFlagAliasMap; \
    std::map<std::string,std::string> deprecatedLongFlagAliasMap; \
    /* Remap flag aliases to the true flag */ \
    std::vector<std::string> targs; \
    std::map<std::string,std::string>::iterator ait; \
    std::map<std::string,std::string>::iterator dait; \
    size_t ac; \
    for (ac=0; ac < static_cast<size_t>(argc); ++ac)  \
       {  \
       if (strlen(argv[ac]) == 2 && argv[ac][0]=='-') \
         { \
         /* short flag case */ \
         std::string tflag(argv[ac], 1, strlen(argv[ac])-1); \
         ait = flagAliasMap.find(tflag); \
         dait = deprecatedFlagAliasMap.find(tflag); \
         if (ait != flagAliasMap.end() || dait != deprecatedFlagAliasMap.end()) \
           { \
           if (ait != flagAliasMap.end()) \
             { \
             /* remap the flag */ \
             targs.push_back("-" + (*ait).second); \
             } \
           else if (dait != deprecatedFlagAliasMap.end()) \
             { \
             std::cout << "Flag \"" << argv[ac] << "\" is deprecated. Please use flag \"-" << (*dait).second << "\" instead. " << std::endl; \
             /* remap the flag */ \
             targs.push_back("-" + (*dait).second); \
             } \
           } \
         else \
           { \
           targs.push_back(argv[ac]); \
           } \
         } \
       else if (strlen(argv[ac]) > 2 && argv[ac][0]=='-' && argv[ac][1]=='-') \
         { \
         /* long flag case */ \
         std::string tflag(argv[ac], 2, strlen(argv[ac])-2); \
         ait = longFlagAliasMap.find(tflag); \
         dait = deprecatedLongFlagAliasMap.find(tflag); \
         if (ait != longFlagAliasMap.end() || dait != deprecatedLongFlagAliasMap.end()) \
           { \
           if (ait != longFlagAliasMap.end()) \
             { \
             /* remap the flag */ \
             targs.push_back("--" + (*ait).second); \
             } \
           else if (dait != deprecatedLongFlagAliasMap.end()) \
             { \
             std::cout << "Long flag \"" << argv[ac] << "\" is deprecated. Please use long flag \"--" << (*dait).second << "\" instead. " << std::endl; \
             /* remap the flag */ \
             targs.push_back("--" + (*dait).second); \
             } \
           } \
         else \
           { \
           targs.push_back(argv[ac]); \
           } \
         } \
       else if (strlen(argv[ac]) > 2 && argv[ac][0]=='-' && argv[ac][1]!='-') \
         { \
         /* short flag case where multiple flags are given at once ala */ \
         /* "ls -ltr" */ \
         std::string tflag(argv[ac], 1, strlen(argv[ac])-1); \
         std::string rflag("-"); \
         for (std::string::size_type fi=0; fi < tflag.size(); ++fi) \
           { \
           std::string tf(tflag, fi, 1); \
           ait = flagAliasMap.find(tf); \
           dait = deprecatedFlagAliasMap.find(tf); \
           if (ait != flagAliasMap.end() || dait != deprecatedFlagAliasMap.end()) \
             { \
             if (ait != flagAliasMap.end()) \
               { \
               /* remap the flag */ \
               rflag += (*ait).second; \
               } \
             else if (dait != deprecatedFlagAliasMap.end()) \
               { \
               std::cout << "Flag \"-" << tf << "\" is deprecated. Please use flag \"-" << (*dait).second << "\" instead. " << std::endl; \
               /* remap the flag */ \
               rflag += (*dait).second; \
               } \
             } \
           else \
             { \
             rflag += tf; \
             } \
           } \
         targs.push_back(rflag); \
         } \
       else \
         { \
         /* skip the argument without remapping (this is the case for any */ \
         /* arguments for flags */ \
         targs.push_back(argv[ac]); \
         } \
       } \
 \
   /* Remap args to a structure that CmdLine::parse() can understand*/ \
   std::vector<char*> vargs; \
   for (ac = 0; ac < targs.size(); ++ac) \
     {  \
     vargs.push_back(const_cast<char *>(targs[ac].c_str())); \
     } \
    commandLine.parse ( vargs.size(), (char**) &(vargs[0]) ); \
  } \
catch ( TCLAP::ArgException e ) \
  { \
  std::cerr << "error: " << e.error() << " for arg " << e.argId() << std::endl; \
  return ( EXIT_FAILURE ); \
  }
#define GENERATE_TCLAP_ASSIGNMENT \
      radius = radiusArg.getValue(); \
	  maxrad = maxradArg.getValue(); \
	  minrad = minradArg.getValue(); \
	  lowerthreshold = lowerthresholdArg.getValue(); \
	  upperthreshold = upperthresholdArg.getValue(); \
	  bX = xArg.getValue(); \
	  bY = yArg.getValue(); \
	  eX = exArg.getValue(); \
	  eY = eyArg.getValue(); \
	  ncircles = circlesArg.getValue(); \
      inputImage = inputImageArg.getValue(); \
      outputImage = outputImageArg.getValue(); \
      echoSwitch = echoSwitchArg.getValue(); \
      xmlSwitch = xmlSwitchArg.getValue(); \
      processInformationAddressString = processInformationAddressStringArg.getValue(); \
      returnParameterFile = returnParameterFileArg.getValue(); \

#define GENERATE_TCLAP GENERATE_TCLAP_PARSE;GENERATE_TCLAP_ASSIGNMENT
#define GENERATE_TCLAP_ASSIGNMENT_IFSET \
    if( radiusArg.isSet() ) \
      { \
      radius = radiusArg.getValue(); \
      } \
	if( maxradArg.isSet() ) \
      { \
      maxrad = maxradArg.getValue(); \
      } \
	if( minradArg.isSet() ) \
      { \
      minrad = minradArg.getValue(); \
      } \
	if( lowerthresholdArg.isSet() ) \
      { \
      lowerthreshold = lowerthresholdArg.getValue(); \
      } \
	if( upperthresholdArg.isSet() ) \
      { \
      upperthreshold = upperthresholdArg.getValue(); \
      } \
	if( xArg.isSet() ) \
      { \
      bX = xArg.getValue(); \
      } \
	if( yArg.isSet() ) \
      { \
      bY = yArg.getValue(); \
      } \
	if( exArg.isSet() ) \
      { \
      eX = exArg.getValue(); \
      } \
	if( eyArg.isSet() ) \
      { \
      eY = eyArg.getValue(); \
      } \
	if( ncirclesArg.isSet() ) \
      { \
      ncircles = circlesArg.getValue(); \
      } \
	if( inputImageArg.isSet() ) \
      { \
      inputImage = inputImageArg.getValue(); \
      } \
    if( outputImageArg.isSet() ) \
      { \
      outputImage = outputImageArg.getValue(); \
      } \
    if( echoSwitchArg.isSet() ) \
      { \
      echoSwitch = echoSwitchArg.getValue(); \
      } \
    if( xmlSwitchArg.isSet() ) \
      { \
      xmlSwitch = xmlSwitchArg.getValue(); \
      } \
    if( processInformationAddressStringArg.isSet() ) \
      { \
      processInformationAddressString = processInformationAddressStringArg.getValue(); \
      } \
    if( returnParameterFileArg.isSet() ) \
      { \
      returnParameterFile = returnParameterFileArg.getValue(); \
      } \

#define GENERATE_ECHOARGS \
if (echoSwitch) \
{ \
	std::cout << "Command Line Arguments" << std::endl; \
	std::cout << "    radius: " << radius << std::endl; \
	std::cout << "    maxrad: " << maxrad << std::endl; \
	std::cout << "    minrad: " << minrad << std::endl; \
	std::cout << "    lowerthreshold: " << lowerthreshold << std::endl; \
	std::cout << "    upperthreshold: " << upperthreshold << std::endl; \
	std::cout << "    bX: " << bX << std::endl; \
	std::cout << "    bY: " << bY << std::endl; \
	std::cout << "    eX: " << eX << std::endl; \
	std::cout << "    eY: " << eY << std::endl; \
	std::cout << "    ncircles: " << ncircles << std::endl; \
	std::cout << "    inputImage: " << inputImage << std::endl; \
	std::cout << "    outputImage: " << outputImage << std::endl; \
	std::cout << "    echoSwitch: " << echoSwitch << std::endl; \
	std::cout << "    xmlSwitch: " << xmlSwitch << std::endl; \
	std::cout << "    processInformationAddressString: " << processInformationAddressString << std::endl; \
	std::cout << "    returnParameterFile: " << returnParameterFile << std::endl; \
}
#define GENERATE_ProcessInformationAddressDecoding \
ModuleProcessInformation *CLPProcessInformation = 0; \
if (processInformationAddressString != "") \
{ \
sscanf(processInformationAddressString.c_str(), "%p", &CLPProcessInformation); \
}
#define PARSE_ARGS GENERATE_LOGO;GENERATE_XML;GENERATE_TCLAP;GENERATE_ECHOARGS;GENERATE_ProcessInformationAddressDecoding;
